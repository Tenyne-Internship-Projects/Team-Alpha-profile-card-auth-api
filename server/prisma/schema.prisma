generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum Role {
  client
  admin
  freelancer
}

enum ProjectStatus {
  open
  closed
  repost
}

enum ApplicationStatus {
  pending
  approved
  rejected
}

enum ProjectProgressStatus {
  draft
  ongoing
  completed
  cancelled
}
model User {
  id                       String             @id @default(uuid())
  fullname                 String
  email                    String             @unique
  password                 String
  role                     Role               @default(freelancer)
  verified                 Boolean            @default(false)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt

  resetToken               String?
  resetTokenExpires        DateTime?
  verificationToken        String?
  verificationTokenExpires DateTime?

  applications             Application[]      @relation("FreelancerApplications")
  favorites                Favorite[]         @relation("FreelancerFavorites")
  projects                 Project[]          @relation("UserProjects")
  freelancerProfile        FreelancerProfile? @relation("FreelancerProfileUser")
  clientProfile            ClientProfile?     @relation("ClientProfileUser")
  payments                 Payment[]          @relation("FreelancerPayments")
  notifications            Notification[]     

  profileVisits            ProfileVisit[]     @relation("VisitedProfile") 
  profileViews             ProfileVisit[]     @relation("ProfileVisitor") 

  @@map("users")
}


model FreelancerProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  fullName          String
  gender            String
  dateOfBirth       DateTime
  profession        String
  specialization    String
  location          String
  primaryEmail      String
  phoneNumber       String
  salaryExpectation Int?
  isAvailable       Boolean  @default(true)
  bio               String?
  skills            String[]
  avatarUrl         String?
  documents         String[]
  linkedIn          String?
  github            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation("FreelancerProfileUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("freelancer_profiles")
}

model ClientProfile {
  id                 String   @id @default(uuid())
  userId             String   @unique
  companyName        String?
  companyWebsite     String?
  companyIndustry    String?
  companySize        String?
  companyAddress     String?
  companyLogo        String?
  hiringCategories   String[]
  isHiringFrequently Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  user               User     @relation("ClientProfileUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("client_profiles")
}
model ProfileVisit {
  id          String   @id @default(uuid())
  profileId   String
  visitorId   String
  visitedAt   DateTime @default(now())
  count       Int      @default(1)

  profile     User     @relation("VisitedProfile", fields: [profileId], references: [id], onDelete: Cascade)
  visitor     User     @relation("ProfileVisitor", fields: [visitorId], references: [id], onDelete: Cascade)

  @@unique([profileId, visitorId])
  @@map("profile_visits")
}

model Project {
  id               String                @id @default(uuid())
  title            String
  description      String
  budget           Int
  tags             String[]
  deadline         DateTime
  status           ProjectStatus         @default(open)
  progressStatus   ProjectProgressStatus @default(draft)
  requirement      String                @default("To be specified")
  location         String                @default("Unknown")
  responsibilities String[]              @default([])

  deleted          Boolean               @default(false)
  deletedAt        DateTime?
  deletedBy        String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt

  clientId         String
  paymentId        String?

  applications     Application[]         @relation("ProjectApplications")
  favoritedBy      Favorite[]            @relation("ProjectFavorites")
  payment          Payment?              @relation("ProjectPayment")
  Client           User                  @relation("UserProjects", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([budget])
  @@index([tags])
  @@index([deadline])
  @@index([status])
  @@map("projects")
}

model Application {
  id           String            @id @default(uuid())
  projectId    String
  freelancerId String
  message      String?
  status       ApplicationStatus @default(pending)
  createdAt    DateTime          @default(now())

  freelancer   User              @relation("FreelancerApplications", fields: [freelancerId], references: [id])
  project      Project           @relation("ProjectApplications", fields: [projectId], references: [id])

  @@unique([projectId, freelancerId], name: "unique_application")
  @@map("applications")
}

model Favorite {
  id           String   @id @default(uuid())
  freelancerId String
  projectId    String
  createdAt    DateTime @default(now())

  freelancer   User     @relation("FreelancerFavorites", fields: [freelancerId], references: [id])
  project      Project  @relation("ProjectFavorites", fields: [projectId], references: [id])

  @@unique([freelancerId, projectId], name: "freelancerId_projectId")
  @@map("favorites")
}

model Payment {
  id           String   @id @default(uuid())
  projectId    String   @unique
  freelancerId String
  amount       Int
  paidAt       DateTime @default(now())

  project      Project  @relation("ProjectPayment", fields: [projectId], references: [id])
  freelancer   User     @relation("FreelancerPayments", fields: [freelancerId], references: [id])

  @@map("payments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}
