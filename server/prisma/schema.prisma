generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id                       String    @id @default(uuid())
  fullname                 String
  email                    String    @unique
  password                 String
  createdAt                DateTime  @default(now())
  verified                 Boolean   @default(false)
  resetToken               String?
  resetTokenExpires        DateTime?
  verificationToken        String?
  verificationTokenExpires DateTime?
  role                     Role      @default(freelancer)
  updatedAt                DateTime  @updatedAt
  profile                  Profile?  @relation("UserProfile")
  projects                 Project[] @relation("UserProjects")

  @@map("users")
}

model Profile {
  id                 String   @id @default(uuid())
  userId             String   @unique
  fullName           String
  gender             String
  dateOfBirth        DateTime
  profession         String
  specialization     String
  location           String
  bio                String?
  skills             String[]
  avatarUrl          String?
  documents          String[]
  linkedIn           String?
  github             String?
  primaryEmail       String
  phoneNumber        String
  salaryExpectation  Int?
  isAvailable        Boolean  @default(true)
  companyName        String?
  companyWebsite     String?
  companyIndustry    String?
  companySize        String?
  companyAddress     String?
  isHiringFrequently Boolean  @default(false)
  companyLogo        String?
  hiringCategories   String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Project {
  id          String        @id @default(uuid())
  title       String
  description String
  budget      Int
  tags        String[]
  deadline    DateTime
  status      ProjectStatus @default(open)
  deleted     Boolean       @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  clientId    String
  requirement String?
  Client      User          @relation("UserProjects", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([budget])
  @@index([tags])
  @@index([deadline])
  @@index([status])
  @@map("projects")
}

enum Role {
  client
  admin
  freelancer
}

enum ProjectStatus {
  open
  closed
  repost
}
